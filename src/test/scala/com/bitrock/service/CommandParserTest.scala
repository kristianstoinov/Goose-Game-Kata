package com.bitrock.service

import com.bitrock.model._
import org.scalatest.{FlatSpec, Matchers}

class CommandParserTest extends FlatSpec with Matchers {

  def rollDice() = DiceRoll(6, 6)

  val parser = CommandParser(() => rollDice())

  "add Player Pippo" should "create a new player named Pippo" in {
    parseAndAssert(input = "add player Pippo", expected = AddPlayer("Pippo"))
  }

  "move Pippo 4,6" should "return a double dice roll" in {
    val diceRoll = DiceRoll(4, 6)
    parseAndAssert(input = s"move Pippo $diceRoll", expected = MovePlayer("Pippo", diceRoll))
  }

  "move Pippo" should "return a double dice roll generated by the system" in {
    parseAndAssert(input = "move Pippo", expected = MovePlayer("Pippo", rollDice()))
  }

  "quit" should "return a Quit command" in {
    parseAndAssert(input = "quit", expected = Quit)
  }

  "Cheating" should "return a CommandNotUnderstood" in {
    val input = "IDDQD"
    parser.parse(input) match {
      case CommandNotUnderstood(in, _) => assert(in === input)
      case _ => fail("Expected a CommandNotUnderstood")
    }
  }

  def parseAndAssert(input: String, expected: Any): Unit = {
    assert(parser.parse(input) === expected)
  }

}
